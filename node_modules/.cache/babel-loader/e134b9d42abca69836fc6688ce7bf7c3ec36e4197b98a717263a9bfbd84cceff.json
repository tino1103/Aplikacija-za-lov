{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { View } from 'react-native';\nlet Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\nexport const MaybeScreenContainer = _ref => {\n  let {\n    enabled,\n    ...rest\n  } = _ref;\n  if (Screens != null) {\n    return /*#__PURE__*/React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = _ref2 => {\n  let {\n    enabled,\n    active,\n    ...rest\n  } = _ref2;\n  if (Screens != null) {\n    return /*#__PURE__*/React.createElement(Screens.Screen, _extends({\n      enabled: enabled,\n      activityState: active\n    }, rest));\n  }\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":{"version":3,"names":["React","View","Screens","require","e","MaybeScreenContainer","_ref","enabled","rest","createElement","ScreenContainer","_extends","MaybeScreen","_ref2","active","Screen","activityState"],"sources":["/Users/valentinodenona/Desktop/REACT/node_modules/@react-navigation/stack/src/views/Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation<0 | 1>;\n  children: React.ReactNode;\n  freezeOnBlur?: boolean;\n}) => {\n  if (Screens != null) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAmBC,IAAI,QAAmB,cAAc;AAExD,IAAIC,OAA0D;AAE9D,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC3C,CAAC,CAAC,OAAOC,CAAC,EAAE;EACV;AAAA;AAGF,OAAO,MAAMC,oBAAoB,GAAGC,IAAA,IAM9B;EAAA,IAN+B;IACnCC,OAAO;IACP,GAAGC;EAIL,CAAC,GAAAF,IAAA;EACC,IAAIJ,OAAO,IAAI,IAAI,EAAE;IACnB,oBAAOF,KAAA,CAAAS,aAAA,CAACP,OAAO,CAACQ,eAAe,EAAAC,QAAA;MAACJ,OAAO,EAAEA;IAAQ,GAAKC,IAAI,EAAI;EAChE;EAEA,oBAAOR,KAAA,CAAAS,aAAA,CAACR,IAAI,EAAKO,IAAI,CAAI;AAC3B,CAAC;AAED,OAAO,MAAMI,WAAW,GAAGC,KAAA,IASrB;EAAA,IATsB;IAC1BN,OAAO;IACPO,MAAM;IACN,GAAGN;EAML,CAAC,GAAAK,KAAA;EACC,IAAIX,OAAO,IAAI,IAAI,EAAE;IACnB,oBACEF,KAAA,CAAAS,aAAA,CAACP,OAAO,CAACa,MAAM,EAAAJ,QAAA;MAACJ,OAAO,EAAEA,OAAQ;MAACS,aAAa,EAAEF;IAAO,GAAKN,IAAI,EAAI;EAEzE;EAEA,oBAAOR,KAAA,CAAAS,aAAA,CAACR,IAAI,EAAKO,IAAI,CAAI;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}