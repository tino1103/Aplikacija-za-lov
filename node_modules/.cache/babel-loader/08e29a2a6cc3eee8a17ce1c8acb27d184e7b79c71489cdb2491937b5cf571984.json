{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport default class StackView extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    // If there was no change in routes, we don't need to compute anything\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes = props.state.index < props.state.routes.length - 1 ?\n    // Remove any extra routes from the state\n    // The last visible route should be the focused route, i.e. at current index\n    props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n    const getAnimationTypeForReplace = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref => {\n        let {\n          key\n        } = _ref;\n        return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n      }));\n    }\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n  state = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {}\n  };\n  getPreviousRoute = _ref2 => {\n    let {\n      route\n    } = _ref2;\n    const {\n      closingRouteKeys,\n      replacingRouteKeys\n    } = this.state;\n    const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n    const index = routes.findIndex(r => r.key === route.key);\n    return routes[index - 1];\n  };\n  renderScene = _ref3 => {\n    let {\n      route\n    } = _ref3;\n    const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n    if (!descriptor) {\n      return null;\n    }\n    return descriptor.render();\n  };\n  renderHeader = props => {\n    return /*#__PURE__*/React.createElement(HeaderContainer, props);\n  };\n  handleOpenRoute = _ref4 => {\n    let {\n      route\n    } = _ref4;\n    const {\n      state,\n      navigation\n    } = this.props;\n    const {\n      closingRouteKeys,\n      replacingRouteKeys\n    } = this.state;\n    if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState(state => ({\n        routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n        closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n        replacingRouteKeys: []\n      }));\n    }\n  };\n  handleCloseRoute = _ref5 => {\n    let {\n      route\n    } = _ref5;\n    const {\n      state,\n      navigation\n    } = this.props;\n    if (state.routes.some(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState(state => ({\n        routes: state.routes.filter(r => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n        closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n      }));\n    }\n  };\n  handleTransitionStart = (_ref6, closing) => {\n    let {\n      route\n    } = _ref6;\n    return this.props.navigation.emit({\n      type: 'transitionStart',\n      data: {\n        closing\n      },\n      target: route.key\n    });\n  };\n  handleTransitionEnd = (_ref7, closing) => {\n    let {\n      route\n    } = _ref7;\n    return this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: {\n        closing\n      },\n      target: route.key\n    });\n  };\n  handleGestureStart = _ref8 => {\n    let {\n      route\n    } = _ref8;\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key\n    });\n  };\n  handleGestureEnd = _ref9 => {\n    let {\n      route\n    } = _ref9;\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key\n    });\n  };\n  handleGestureCancel = _ref10 => {\n    let {\n      route\n    } = _ref10;\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key\n    });\n  };\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => /*#__PURE__*/React.createElement(ModalPresentationContext.Consumer, null, isParentModal => /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => /*#__PURE__*/React.createElement(CardStack, _extends({\n      insets: insets,\n      isParentHeaderShown: isParentHeaderShown,\n      isParentModal: isParentModal,\n      getPreviousRoute: this.getPreviousRoute,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest)))))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","getDerivedStateFromProps","props","state","routes","previousRoutes","map","r","key","descriptors","previousDescriptors","reduce","acc","route","slice","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","some","includes","filter","splice","_ref","Error","getPreviousRoute","_ref2","findIndex","renderScene","_ref3","render","renderHeader","createElement","handleOpenRoute","_ref4","navigation","routeNames","name","navigate","setState","handleCloseRoute","_ref5","dispatch","pop","source","target","handleTransitionStart","_ref6","closing","emit","type","data","handleTransitionEnd","_ref7","handleGestureStart","_ref8","handleGestureEnd","_ref9","handleGestureCancel","_ref10","_","rest","style","styles","container","Consumer","insets","isParentModal","isParentHeaderShown","_extends","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","create","flex"],"sources":["/Users/valentinodenona/Desktop/REACT/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}