{"ast":null,"code":"var _jsxFileName = \"/Users/valentinodenona/Desktop/REACT/Aplikacija-za-lov/src/pages/SkeniranjeKoda.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { QrReader } from 'react-qr-reader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QRCodeScanner() {\n  _s();\n  const [qrResult, setQrResult] = useState('');\n  const [isCameraOpen, setIsCameraOpen] = useState(false);\n  const handleScan = data => {\n    if (data) {\n      setQrResult(data);\n      setIsCameraOpen(false); // Ako želite, možete automatski zatvoriti kameru nakon uspješnog skeniranja\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n  };\n  const handleButtonClick = () => {\n    setIsCameraOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Scan QR Code\",\n      value: qrResult,\n      onChange: e => setQrResult(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"Scan QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), isCameraOpen && /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 300,\n      onError: handleError,\n      onScan: handleScan,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n_s(QRCodeScanner, \"vNaZdw+RoRsR33Zl4WDeB2cGbDA=\");\n_c = QRCodeScanner;\nexport default QRCodeScanner;\nvar _c;\n$RefreshReg$(_c, \"QRCodeScanner\");","map":{"version":3,"names":["React","useState","QrReader","jsxDEV","_jsxDEV","QRCodeScanner","_s","qrResult","setQrResult","isCameraOpen","setIsCameraOpen","handleScan","data","handleError","err","console","error","handleButtonClick","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","delay","onError","onScan","style","width","_c","$RefreshReg$"],"sources":["/Users/valentinodenona/Desktop/REACT/Aplikacija-za-lov/src/pages/SkeniranjeKoda.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { QrReader } from 'react-qr-reader';\n\nfunction QRCodeScanner() {\n    const [qrResult, setQrResult] = useState('');\n    const [isCameraOpen, setIsCameraOpen] = useState(false);\n\n    const handleScan = data => {\n        if (data) {\n            setQrResult(data);\n            setIsCameraOpen(false);  // Ako želite, možete automatski zatvoriti kameru nakon uspješnog skeniranja\n        }\n    };\n\n    const handleError = err => {\n        console.error(err);\n    };\n\n    const handleButtonClick = () => {\n        setIsCameraOpen(true);\n    };\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                placeholder=\"Scan QR Code\"\n                value={qrResult}\n                onChange={(e) => setQrResult(e.target.value)}\n            />\n            <button onClick={handleButtonClick}>Scan QR Code</button>\n            {isCameraOpen && (\n                <QrReader\n                    delay={300}\n                    onError={handleError}\n                    onScan={handleScan}\n                    style={{ width: '100%' }}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default QRCodeScanner;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMU,UAAU,GAAGC,IAAI,IAAI;IACvB,IAAIA,IAAI,EAAE;MACNJ,WAAW,CAACI,IAAI,CAAC;MACjBF,eAAe,CAAC,KAAK,CAAC,CAAC,CAAE;IAC7B;EACJ,CAAC;EAED,MAAMG,WAAW,GAAGC,GAAG,IAAI;IACvBC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACtB,CAAC;EAED,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC5BP,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACIN,OAAA;IAAAc,QAAA,gBACId,OAAA;MACIe,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,cAAc;MAC1BC,KAAK,EAAEd,QAAS;MAChBe,QAAQ,EAAGC,CAAC,IAAKf,WAAW,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFxB,OAAA;MAAQyB,OAAO,EAAEZ,iBAAkB;MAAAC,QAAA,EAAC;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACxDnB,YAAY,iBACTL,OAAA,CAACF,QAAQ;MACL4B,KAAK,EAAE,GAAI;MACXC,OAAO,EAAElB,WAAY;MACrBmB,MAAM,EAAErB,UAAW;MACnBsB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACtB,EAAA,CAtCQD,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAwCtB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}